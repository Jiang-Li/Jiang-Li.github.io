)
head(df)
head(df)
lapply(df, class)
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T)
)
lapply(df, class)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T)
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
lapply(df, class)
lapply(df, class)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
lapply(df, class)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
lapply(df, class)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
)
)
head(df)
lapply(df, class)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
lapply(df, class)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
lapply(df, class)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
write_feather(df, "sample_data.feather")
# row count
nrow(df)
# column count
ncol(df)
# shape
dim(df)
# column names
names(df)
# data type by column
lapply(df, class)
reticulate::repl_python()
# count missing values by columns
colSums(is.na(df))
# fill all missing values by 0
df %>% replace(is.na(.), 0) %>% head() # df[is.na(df)] <- 0 also works
# fill missing values by columns
df %>% replace_na(list(dimension1 = "Unknown", measure1 = 0)) %>% head()
reticulate::repl_python()
# unique row
df %>% distinct()
# unique row by columns
df %>% distinct(dimension1, dimension2, .keep_all = T)
reticulate::repl_python()
# count
table(df$dimension1)
# contingency table
table(df$dimension1, df$dimension2)
reticulate::repl_python()
# summarize the total, percent, ratio, and ratio relativity
df %>%
group_by(dimension1) %>%
summarise(
measure1 = sum(measure1, na.rm = T),
measure2 = sum(measure2, na.rm = T),
count = n()
) %>%
mutate(
measure1_percent = measure1/sum(measure1),
ratio = measure1/measure2
) %>%
mutate(
ratio_relativity = ratio/(sum(measure1)/sum(measure2))
)
reticulate::repl_python()
# wide to long
df_reshape <- df %>% gather(c("measure1", "measure2"),
key = "measure", value = "values")
df_reshape
# long to wide
df_reshape %>%
group_by(dimension1, dimension2, measure) %>%
summarise(values = sum(values, na.rm = T)) %>%
spread(key = measure, value = values) %>% head()
reticulate::repl_python()
df <- df %>% replace_na(list(dimension1 = "Unknown", dimension2 = "Unknown"))
df2 <- df %>%
group_by(dimension1, dimension2) %>%
summarise(
measure3 = sum(measure1, na.rm = T),
measure4 = sum(measure2, na.rm = T)
) %>%
rename(dimension3 = dimension1, dimension4 = dimension2)
df2
write_feather(df2, "sample_data2.feather")
# left join tables by two key variables
left_join(df, df2,
by = c(
"dimension1" = "dimension3",
"dimension2" = "dimension4"
)
) %>% head()
reticulate::repl_python()
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
install.packages("feather")
library(feather)
write_feather(df, "sample_data.feather")
library(tidyverse)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
write_feather(df, "sample_data.feather")
# row count
nrow(df)
# column count
ncol(df)
# shape
dim(df)
# column names
names(df)
# data type by column
lapply(df, class)
library(feather)
write_feather(df, "sample_data.feather")
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
library(tidyverse)
reticulate::repl_python()
import pandas as pd
reticulate::py_discover_config()
reticulate::repl_python()
library(tidyverse)
reticulate::repl_python()
import pandas as pd
reticulate::py_discover_config()
reticulate::repl_python()
library(tidyverse)
reticulate::repl_python()
import pandas as pd
reticulate::py_discover_config()
library(tidyverse)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
write_feather(df, "sample_data.feather")
# row count
nrow(df)
# column count
ncol(df)
# shape
dim(df)
# column names
names(df)
# data type by column
lapply(df, class)
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
library(tidyverse)
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
devtools::install_github("rstudio/reticulate")
install.packages("devtools")
devtools::install_github("rstudio/reticulate")
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
library(tidyverse)
reticulate::repl_python()
import pandas as pd
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
write_feather(df, "sample_data.feather")
# row count
nrow(df)
# column count
ncol(df)
# shape
dim(df)
# column names
names(df)
# data type by column
lapply(df, class)
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
install.packages("feather")
library(feather)
install.packages("feather")
library(feather)
write_feather(df, "sample_data.feather")
# row count
nrow(df)
# column count
ncol(df)
# shape
dim(df)
# column names
names(df)
# data type by column
lapply(df, class)
reticulate::repl_python()
library(tidyverse)
set.seed(12)
N <- 1000
df <- data.frame(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T),
stringsAsFactors=FALSE
)
df <- as.data.frame(lapply(df,
function(r)
r[sample(c(TRUE, NA),
prob = c(0.85, 0.15),
size = length(r),
replace = TRUE)]
),
stringsAsFactors=FALSE
)
head(df)
library(feather)
write_feather(df, "sample_data.feather")
# row count
nrow(df)
# column count
ncol(df)
# shape
dim(df)
# column names
names(df)
# data type by column
lapply(df, class)
reticulate::repl_python()
# count missing values by columns
colSums(is.na(df))
# fill all missing values by 0
df %>% replace(is.na(.), 0) %>% head() # df[is.na(df)] <- 0 also works
# fill missing values by columns
df %>% replace_na(list(dimension1 = "Unknown", measure1 = 0)) %>% head()
reticulate::repl_python()
# unique row
df %>% distinct()
# unique row by columns
df %>% distinct(dimension1, dimension2, .keep_all = T)
reticulate::repl_python()
# count
table(df$dimension1)
# contingency table
table(df$dimension1, df$dimension2)
reticulate::repl_python()
# summarize the total, percent, ratio, and ratio relativity
df %>%
group_by(dimension1) %>%
summarise(
measure1 = sum(measure1, na.rm = T),
measure2 = sum(measure2, na.rm = T),
count = n()
) %>%
mutate(
measure1_percent = measure1/sum(measure1),
ratio = measure1/measure2
) %>%
mutate(
ratio_relativity = ratio/(sum(measure1)/sum(measure2))
)
reticulate::repl_python()
# wide to long
df_reshape <- df %>% gather(c("measure1", "measure2"),
key = "measure", value = "values")
df_reshape
# long to wide
df_reshape %>%
group_by(dimension1, dimension2, measure) %>%
summarise(values = sum(values, na.rm = T)) %>%
spread(key = measure, value = values) %>% head()
reticulate::repl_python()
df <- df %>% replace_na(list(dimension1 = "Unknown", dimension2 = "Unknown"))
df2 <- df %>%
group_by(dimension1, dimension2) %>%
summarise(
measure3 = sum(measure1, na.rm = T),
measure4 = sum(measure2, na.rm = T)
) %>%
rename(dimension3 = dimension1, dimension4 = dimension2)
df2
write_feather(df2, "sample_data2.feather")
# left join tables by two key variables
left_join(df, df2,
by = c(
"dimension1" = "dimension3",
"dimension2" = "dimension4"
)
) %>% head()
reticulate::repl_python()
library(feather)
write_feather(df, "sample_data.feather")
library(feather)
write_feather(df, "sample_data.feather")
