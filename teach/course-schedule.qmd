---
title: "Course Schedule - Fall 2025"
date-format: none
format:
  html:
    page-layout: full
    css: 
      - ../style.css
toc: false
number-sections: false
---

<style>
.course-table {
  overflow-x: auto;
  margin: 1rem 0;
}
.course-table table {
  width: 100%;
  min-width: 1200px;
  border-collapse: collapse;
  font-size: 0.9rem;
}
.course-table th {
  background: #1e40af;
  color: white;
  padding: 0.75rem 0.5rem;
  text-align: left;
  font-weight: 600;
  position: sticky;
  top: 0;
  z-index: 10;
}
/* Freeze first two columns */
.course-table th:nth-child(1), 
.course-table td:nth-child(1) {
  position: sticky;
  left: 0;
  background: inherit;
  z-index: 5;
}
.course-table th:nth-child(2), 
.course-table td:nth-child(2) {
  position: sticky;
  left: 120px; /* Adjust based on first column width */
  background: inherit;
  z-index: 5;
}
/* Header cells for frozen columns need higher z-index */
.course-table th:nth-child(1) {
  z-index: 15;
}
.course-table th:nth-child(2) {
  z-index: 15;
}
.course-table td {
  padding: 0.5rem;
  border-bottom: 1px solid #e5e7eb;
  white-space: nowrap;
}
.course-table tr:nth-child(even) {
  background: #f9fafb;
}
.course-table tr:hover {
  background: #f3f4f6;
}
.course-table tr.first-term {
  background: #dbeafe !important;
  font-weight: 600;
}
.course-table tr.first-term:hover {
  background: #bfdbfe !important;
}
/* Ensure frozen columns match row backgrounds */
.course-table tr:nth-child(even) td:nth-child(1),
.course-table tr:nth-child(even) td:nth-child(2) {
  background: #f9fafb;
}
.course-table tr:hover td:nth-child(1),
.course-table tr:hover td:nth-child(2) {
  background: #f3f4f6;
}
.course-table tr.first-term td:nth-child(1),
.course-table tr.first-term td:nth-child(2) {
  background: #dbeafe !important;
}
.course-table tr.first-term:hover td:nth-child(1),
.course-table tr.first-term:hover td:nth-child(2) {
  background: #bfdbfe !important;
}
/* Header background for frozen columns */
.course-table th:nth-child(1),
.course-table th:nth-child(2) {
  background: #1e40af;
}
.enrollment {
  text-align: center;
  font-weight: 600;
}
.available {
  color: #059669;
}
.limited {
  color: #d97706;
}
.full {
  color: #dc2626;
}
.first-term-badge {
  background: #3b82f6;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 0.75rem;
  font-weight: 600;
}
</style>

```{python}
#| echo: false
#| warning: false

import pandas as pd
import numpy as np
from datetime import datetime
import pytz
import os

# Read data from the Franklin course scraper project
data_path = "franklin-course-scraper/data/franklin_courses.csv"

if os.path.exists(data_path):
    df = pd.read_csv(data_path)
    
    # Clean and prepare data
    # Fix Course_Code: Extract proper course code from mangled data
    df['Course_Code_Clean'] = df['Session_Code'].str.extract(r'([A-Z]+\*[0-9]+)')
    df['Course_Display'] = df['Course_Code_Clean'].str.replace('*', ' ')
    
    # Fix Session_Code: Extract just the section code
    df['Session_Code_Clean'] = df['Session_Code'].str.extract(r'-([A-Z0-9]+)$')
    
    # Note: Available_Seats column removed from CSV output in scraper
    # Using Enrolled_Seats and Total_Seats to calculate availability status
    df['Available_Seats'] = pd.to_numeric(df['Total_Seats'], errors='coerce') - pd.to_numeric(df['Enrolled_Seats'], errors='coerce')
    df['Available_Seats'] = df['Available_Seats'].fillna(0).astype(int)
    
    # Calculate availability status
    df['Enrollment_Status'] = df.apply(lambda row: 
        'Available' if row['Available_Seats'] > 5 else
        'Limited' if row['Available_Seats'] > 0 else
        'Full', axis=1)
    
    # Clean course names
    df['Course_Name_Clean'] = df['Course_Name']
    
    # Parse schedule information
    df['Weekdays_Clean'] = df['Weekdays'].fillna('TBD')
    df['Class_Times_Clean'] = df['Class_Times'].fillna('TBD')
    df['Locations_Clean'] = df['Locations'].fillna('TBD')
    df['Instructors_Clean'] = df['Instructors'].fillna('TBD')
    
    # Sort by course code and session
    df = df.sort_values(['Course_Code_Clean', 'Session_Code_Clean'])
    
    # Statistics
    total_sections = len(df)
    total_courses = df['Course_Code_Clean'].nunique()
    total_enrolled = df['Enrolled_Seats'].sum()
    total_capacity = df['Total_Seats'].sum()
    
    # Format the datetime - now saved directly in EST from scraper
    if len(df) > 0:
        scraped_time = df['Scraped_DateTime'].iloc[0]
        try:
            # Parse ISO format datetime (already in EST timezone)
            dt = datetime.fromisoformat(scraped_time.replace('T', ' ').replace('-05:00', '').replace('+00:00', ''))
            formatted_time = dt.strftime("%B %d, %Y at %I:%M %p EST")
        except:
            # Fallback for any parsing issues
            formatted_time = scraped_time[:16] + " EST"
    else:
        formatted_time = 'No data'
    
    from IPython.display import HTML, display
    
    stats_html = f"""
    <div style="margin-bottom: 1.5rem; font-size: 1rem;">
        <p><strong>Data Updated:</strong> {formatted_time}</p>
        <p><strong>Total Sections:</strong> {total_sections}</p>
        <p><strong>Courses Offered:</strong> {total_courses}</p>
        <p><strong>Students Enrolled:</strong> {total_enrolled}/{total_capacity}</p>
    </div>
    """
    display(HTML(stats_html))
    
else:
    print("⚠️ Course data not found. Please run the scraper first.")
    df = pd.DataFrame()
```

```{python}
#| echo: false
#| warning: false

if len(df) > 0:
    # Create HTML table with improved formatting (without Available column)
    html_rows = []
    
    for _, row in df.iterrows():
        first_term_class = "first-term" if row['First_Term'] == 'Yes' else ""
        status_class = f"enrollment {row['Enrollment_Status'].lower()}"
        
        # Format enrollment data - only Enrolled and Total (no Available column)
        enrolled_display = str(int(row['Enrolled_Seats']))
        total_display = str(int(row['Total_Seats']))
        
        # Add first term indicator badge
        first_term_indicator = '<span class="first-term-badge">First Term</span>' if row['First_Term'] == 'Yes' else ''
        
        # Clean up display data
        weekdays = row['Weekdays_Clean'] if pd.notna(row['Weekdays_Clean']) else 'TBD'
        times = row['Class_Times_Clean'] if pd.notna(row['Class_Times_Clean']) else 'TBD'
        location = row['Locations_Clean'] if pd.notna(row['Locations_Clean']) else 'TBD'
        instructor = row['Instructors_Clean'] if pd.notna(row['Instructors_Clean']) else 'TBD'
        
        # Format dates
        import re
        start_date = row['Start_Date'] if pd.notna(row['Start_Date']) else 'TBD'
        end_date = row['End_Date'] if pd.notna(row['End_Date']) else 'TBD'
        
        # Clean up date formatting
        if start_date != 'TBD':
            date_match = re.search(r'(\d{1,2}/\d{1,2}/\d{4})', str(start_date))
            start_date = date_match.group(1) if date_match else 'TBD'
        
        if end_date != 'TBD':
            date_match = re.search(r'(\d{1,2}/\d{1,2}/\d{4})', str(end_date))
            end_date = date_match.group(1) if date_match else 'TBD'
        
        date_range = f"{start_date} - {end_date}" if start_date != 'TBD' and end_date != 'TBD' else 'TBD'
        
        html_row = f"""
        <tr class="{first_term_class}">
            <td><strong>{row['Course_Display']}</strong> {first_term_indicator}</td>
            <td>{row['Session_Code_Clean']}</td>
            <td>{row['Course_Name_Clean']}</td>
            <td>{row['Credits']}</td>
            <td class="{status_class}">{enrolled_display}</td>
            <td class="{status_class}">{total_display}</td>
            <td>{weekdays}</td>
            <td>{times}</td>
            <td>{location}</td>
            <td>{instructor}</td>
            <td>{date_range}</td>
        </tr>"""
        html_rows.append(html_row)
    
    # Create table header (removed Available column)
    table_html = f"""
    <div class="course-table">
        <table>
            <thead>
                <tr>
                    <th>Course</th>
                    <th>Section</th>
                    <th>Course Name</th>
                    <th>Credits</th>
                    <th>Enrolled</th>
                    <th>Capacity</th>
                    <th>Days</th>
                    <th>Times</th>
                    <th>Location</th>
                    <th>Instructor</th>
                    <th>Dates</th>
                </tr>
            </thead>
            <tbody>
                {''.join(html_rows)}
            </tbody>
        </table>
    </div>
    """
    
    display(HTML(table_html))
    
else:
    print("⚠️ No course data available to display.")
```

---

*Data automatically generated from Franklin Course Catalog*