---
title: "Course Schedule - Fall 2025"
date-format: none
format:
  html:
    page-layout: full
    css: 
      - ../style.css
      - |
        .course-table {
          overflow-x: auto;
          margin: 1rem 0;
        }
        .course-table table {
          width: 100%;
          min-width: 1300px;
          border-collapse: collapse;
          font-size: 0.9rem;
        }
        .course-table th {
          background: #1e40af;
          color: white;
          padding: 0.75rem 0.5rem;
          text-align: left;
          font-weight: 600;
          position: sticky;
          top: 0;
          z-index: 10;
        }
        .course-table td {
          padding: 0.5rem;
          border-bottom: 1px solid #e5e7eb;
          white-space: nowrap;
        }
        .course-table tr:nth-child(even) {
          background: #f9fafb;
        }
        .course-table tr:hover {
          background: #f3f4f6;
        }
        .course-table tr.first-term {
          background: #dbeafe !important;
          font-weight: 600;
        }
        .course-table tr.first-term:hover {
          background: #bfdbfe !important;
        }
        .enrollment {
          text-align: center;
          font-weight: 600;
        }
        .available {
          color: #059669;
        }
        .limited {
          color: #d97706;
        }
        .full {
          color: #dc2626;
        }
toc: false
number-sections: false
---

## ðŸ“š Complete Course Schedule

::: {.course-table}

```{python}
#| echo: false
import pandas as pd
import os

# Load course data
csv_path = "franklin-course-scraper/data/franklin_courses.csv"
if os.path.exists(csv_path):
    df = pd.read_csv(csv_path)
    
    # Format the data for display
    df_display = df.copy()
    
    # Add enrollment status
    df_display['Enrollment_Status'] = df_display.apply(
        lambda row: f"{row['Enrolled_Seats']}/{row['Total_Seats']}", axis=1
    )
    
    # Add availability status
    def get_availability_class(row):
        available = row['Available_Seats']
        if available >= 10:
            return 'available'
        elif available > 0:
            return 'limited'
        else:
            return 'full'
    
    df_display['Availability_Class'] = df_display.apply(get_availability_class, axis=1)
    
    # Select and rename columns for display
    display_columns = [
        'Course_Code', 'Course_Name', 'Credits', 'Session_Code',
        'Enrollment_Status', 'Available_Seats', 'Waitlist',
        'Weekdays', 'Class_Times', 'Locations', 'Instructors',
        'Teaching_Mode', 'Start_Date', 'End_Date', 'First_Term'
    ]
    
    df_final = df_display[display_columns].copy()
    
    # Rename columns for better display
    df_final.columns = [
        'Course Code', 'Course Name', 'Credits', 'Session',
        'Enrollment', 'Available', 'Waitlist',
        'Weekdays', 'Class Times', 'Location', 'Instructor',
        'Mode', 'Start Date', 'End Date', 'First Term'
    ]
    
    # Sort by course code
    df_final = df_final.sort_values('Course Code')
    
    # Create HTML table with proper styling
    html_table = '<table class="table">\n<thead>\n<tr>\n'
    
    # Add headers
    for col in df_final.columns:
        html_table += f'<th>{col}</th>\n'
    html_table += '</tr>\n</thead>\n<tbody>\n'
    
    # Add rows
    for idx, row in df_final.iterrows():
        # Apply first-term styling
        row_class = 'first-term' if row['First Term'] == 'Yes' else ''
        html_table += f'<tr class="{row_class}">\n'
        
        for col_idx, (col, value) in enumerate(row.items()):
            if col == 'Enrollment':
                html_table += f'<td class="enrollment">{value}</td>\n'
            elif col == 'Available':
                # Get availability class for this row
                orig_idx = df_final.index[df_final['Course Code'] == row['Course Code']].tolist()[0]
                avail_class = df_display.loc[orig_idx, 'Availability_Class']
                html_table += f'<td class="enrollment {avail_class}">{value}</td>\n'
            elif col == 'First Term':
                display_val = 'âœ…' if value == 'Yes' else ''
                html_table += f'<td style="text-align: center;">{display_val}</td>\n'
            else:
                html_table += f'<td>{value}</td>\n'
        
        html_table += '</tr>\n'
    
    html_table += '</tbody>\n</table>'
    
    # Print table info
    from IPython.display import Markdown, display
    display(Markdown("**Fall 2025 Term**"))
    display(Markdown(""))
    display(Markdown("**Legend:** âœ… = First-term courses"))
    print(f"")
    
    # Print the HTML table
    from IPython.display import HTML, display
    display(HTML(html_table))
    
else:
    print("Course data not available. Please check franklin-course-scraper/data/franklin_courses.csv")
```

:::

---

## ðŸ“Š Quick Statistics

```{python}
#| echo: false
if os.path.exists(csv_path):
    # Calculate quick stats
    total_sections = len(df)
    total_enrollment = df['Enrolled_Seats'].sum()
    total_capacity = df['Total_Seats'].sum()
    utilization = (total_enrollment / total_capacity * 100) if total_capacity > 0 else 0
    first_term_count = len(df[df['First_Term'] == 'Yes'])
    
    print(f"- **Total Sections:** {total_sections}")
    print(f"- **Total Enrollment:** {total_enrollment} students")
    print(f"- **Capacity Utilization:** {utilization:.1f}%")
    print(f"- **First-term Courses:** {first_term_count}")
```

---

## Course Schedule - Static Display

**Note:** Python execution is temporarily disabled for testing. Course data will be displayed when the full system is working.

### Course Data Information

The course schedule system is currently being tested. When fully operational, this page will display:

- **Data Updated:** Live timestamp from course scraper
- **Total Sections:** Number of course sections available  
- **Courses Offered:** Unique courses in the catalog
- **Students Enrolled:** Current enrollment vs capacity

### Course Table

When operational, a dynamic table will show:

| Course | Section | Title | Credits | Enrolled | Total | Available | Days | Times | Location | Instructor | Mode | Dates |
|--------|---------|-------|---------|----------|-------|-----------|------|-------|----------|------------|------|-------|
| *Course data will appear here when Python execution is enabled* |

---

*Course schedule functionality temporarily disabled for deployment testing*