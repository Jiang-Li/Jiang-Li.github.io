---
title: "On-campus Course Schedule - Spring 2026"
date-format: none
format:
  html:
    page-layout: full
    css: 
      - ../style.css
toc: false
number-sections: false
---

<style>
.course-table {
  overflow-x: auto;
  margin: 1rem 0;
}
.course-table table {
  width: 100%;
  min-width: 1200px;
  border-collapse: collapse;
  font-size: 0.9rem;
}
.course-table th {
  background: #1e40af;
  color: white;
  padding: 0.75rem 0.5rem;
  text-align: left;
  font-weight: 600;
  position: sticky;
  top: 0;
  z-index: 10;
}
/* Freeze first two columns */
.course-table th:nth-child(1), 
.course-table td:nth-child(1) {
  position: sticky;
  left: 0;
  background: white;
  z-index: 5;
  white-space: nowrap;
  padding-right: 1rem;
}
.course-table th:nth-child(2), 
.course-table td:nth-child(2) {
  position: sticky;
  left: var(--first-col-width, 150px); /* Will be calculated dynamically */
  background: white;
  z-index: 5;
  white-space: nowrap;
  padding-right: 1rem;
}
/* Header cells for frozen columns need higher z-index */
.course-table th:nth-child(1) {
  z-index: 15;
}
.course-table th:nth-child(2) {
  z-index: 15;
}
.course-table td {
  padding: 0.5rem;
  border-bottom: 1px solid #e5e7eb;
}
/* Only freeze the first two columns as nowrap */
.course-table td:nth-child(1),
.course-table td:nth-child(2) {
  white-space: nowrap;
}
.course-table tr:nth-child(even) {
  background: #f9fafb;
}
.course-table tr:hover {
  background: #f3f4f6;
}
.course-table tr.first-term {
  background: #dbeafe !important;
  font-weight: 600;
}
.course-table tr.first-term:hover {
  background: #bfdbfe !important;
}
/* Ensure frozen columns match row backgrounds */
.course-table tr:nth-child(even) td:nth-child(1),
.course-table tr:nth-child(even) td:nth-child(2) {
  background: #f9fafb !important;
}
.course-table tr:hover td:nth-child(1),
.course-table tr:hover td:nth-child(2) {
  background: #f3f4f6 !important;
}
.course-table tr.first-term td:nth-child(1),
.course-table tr.first-term td:nth-child(2) {
  background: #dbeafe !important;
}
.course-table tr.first-term:hover td:nth-child(1),
.course-table tr.first-term:hover td:nth-child(2) {
  background: #bfdbfe !important;
}
/* Header background for frozen columns */
.course-table th:nth-child(1),
.course-table th:nth-child(2) {
  background: #1e40af !important;
}
/* Default row background for frozen columns */
.course-table td:nth-child(1),
.course-table td:nth-child(2) {
  background: white !important;
}
.enrollment {
  text-align: center;
  font-weight: 600;
}
.available {
  color: #059669;
}
.limited {
  color: #d97706;
}
.full {
  color: #dc2626;
}
.first-term-badge {
  background: #3b82f6;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 0.75rem;
  font-weight: 600;
}

/* Export button styles */
.export-section {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 8px;
  border-left: 4px solid #1e40af;
}

.export-btn {
  background: #1e40af;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  margin-right: 10px;
  cursor: pointer;
  font-size: 0.9rem;
  text-decoration: none;
  display: inline-block;
  transition: all 0.2s ease;
}

.export-btn:hover {
  background: #1d4ed8;
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  color: white;
  text-decoration: none;
}

.export-btn.secondary {
  background: #059669;
}

.export-btn.secondary:hover {
  background: #047857;
}
</style>

<script>
function adjustColumnWidths() {
  // Wait for table to be rendered
  setTimeout(() => {
    const table = document.querySelector('.course-table table');
    if (!table) return;
    
    // Get the first column's actual width
    const firstColumnHeader = table.querySelector('th:nth-child(1)');
    if (!firstColumnHeader) return;
    
    const firstColWidth = firstColumnHeader.getBoundingClientRect().width;
    
    // Set CSS custom property for second column positioning
    document.documentElement.style.setProperty('--first-col-width', `${firstColWidth}px`);
    
    console.log(`First column width: ${firstColWidth}px`);
  }, 100);
}

// Run on page load
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', adjustColumnWidths);
} else {
  adjustColumnWidths();
}

// Run again after any dynamic content changes
window.addEventListener('resize', adjustColumnWidths);
</script>

```{python}
#| echo: false
#| warning: false

import pandas as pd
import numpy as np
from datetime import datetime
import pytz
import os

# Read data from the Franklin course scraper project
# Try multiple paths to work from both repo root (GitHub Actions) and teach/ directory (local)
data_paths = [
    "teach/franklin-course-scraper/data/franklin_courses.csv",  # From repo root (GitHub Actions)
    "franklin-course-scraper/data/franklin_courses.csv",        # From teach/ directory (local)
    "../franklin-course-scraper/data/franklin_courses.csv"      # Alternative relative path
]

data_path = None
for path in data_paths:
    if os.path.exists(path):
        data_path = path
        break

# Force refresh - updated Jul 15, 2025
if data_path and os.path.exists(data_path):
    df = pd.read_csv(data_path)
    
    # Clean and prepare data
    # Fix Course_Code: Extract proper course code from mangled data
    df['Course_Code_Clean'] = df['Session_Code'].str.extract(r'([A-Z]+\*[0-9]+)')
    df['Course_Display'] = df['Course_Code_Clean'].str.replace('*', ' ')
    
    # Fix Session_Code: Extract just the section code
    df['Session_Code_Clean'] = df['Session_Code'].str.extract(r'-([A-Z0-9]+)$')
    
    # Note: Available_Seats column removed from CSV output in scraper
    # Using Enrolled_Seats and Total_Seats to calculate availability status
    df['Available_Seats'] = pd.to_numeric(df['Total_Seats'], errors='coerce') - pd.to_numeric(df['Enrolled_Seats'], errors='coerce')
    df['Available_Seats'] = df['Available_Seats'].fillna(0).astype(int)
    
    # Calculate availability status
    df['Enrollment_Status'] = df.apply(lambda row: 
        'Available' if row['Available_Seats'] > 5 else
        'Limited' if row['Available_Seats'] > 0 else
        'Full', axis=1)
    
    # Clean course names
    df['Course_Name_Clean'] = df['Course_Name']
    
    # Parse schedule information
    df['Weekdays_Clean'] = df['Weekdays'].fillna('TBD')
    df['Class_Times_Clean'] = df['Class_Times'].fillna('TBD')
    df['Locations_Clean'] = df['Locations'].fillna('TBD')
    df['Instructors_Clean'] = df['Instructors'].fillna('TBD')
    
    # Sort by course code and session
    df = df.sort_values(['Course_Code_Clean', 'Session_Code_Clean'])
    
    # Statistics
    total_sections = len(df)
    
    # Count total requested courses from course_request.md (not just successfully scraped)
    try:
        # Read the course request file to get total requested courses across all terms
        import re
        course_request_path = 'teach/franklin-course-scraper/course_request.md'  # Already correct, relative to repo root
        
        with open(course_request_path, 'r') as f:
            content = f.read()
        
        # Extract courses from the markdown file
        # Look for the course list section
        course_section = re.search(r'```\s*Term:\s*Fall\s*2025(.*?)```', content, re.DOTALL)
        if not course_section:
            course_section = re.search(r'```\s*Term:\s*Spring\s*2026(.*?)```', content, re.DOTALL)
        if course_section:
            course_text = course_section.group(1)
            # Count lines that look like course codes (with or without asterisk)
            course_lines = [line.strip() for line in course_text.split('\n') 
                          if line.strip() and not line.strip().startswith('#') 
                          and not line.strip().startswith('Term:')]
            total_requested_courses = len(course_lines)
    except:
        # Fallback to counting from successfully scraped data if file reading fails
        total_requested_courses = df['Course_Code_Clean'].nunique() if len(df) > 0 else 0
    
    total_courses = total_requested_courses
    total_enrolled = df['Enrolled_Seats'].sum() if len(df) > 0 else 0
    total_capacity = df['Total_Seats'].sum() if len(df) > 0 else 0
    
    # Format the datetime - now saved directly in EST from scraper
    if len(df) > 0:
        scraped_time = df['Scraped_DateTime'].iloc[0]
        try:
            # Parse ISO format datetime (already in EST timezone)
            dt = datetime.fromisoformat(scraped_time.replace('T', ' ').replace('-05:00', '').replace('+00:00', ''))
            formatted_time = dt.strftime("%B %d, %Y at %I:%M %p EST")
        except:
            # Fallback for any parsing issues
            formatted_time = scraped_time[:16] + " EST"
    else:
        formatted_time = 'No data'
    
    from IPython.display import HTML, display
    
    stats_html = f"""
    <div style="margin-bottom: 1.5rem; font-size: 1rem;">
        <p><strong>Data Updated:</strong> {formatted_time}</p>
        <p><strong>Courses Offered:</strong> {total_courses}</p>
        <p><strong>Students Enrolled:</strong> {total_enrolled}/{total_capacity}</p>
    </div>
    """
    display(HTML(stats_html))
    
else:
    print("⚠️ Course data not found. Please run the scraper first.")
    df = pd.DataFrame()
```

```{python}
#| echo: false
#| warning: false

if len(df) > 0:
    # Weekday mapping for better readability
    weekday_mapping = {
        'M': 'Mon', 'T': 'Tue', 'W': 'Wed', 'R': 'Thu', 'Th': 'Thu',
        'F': 'Fri', 'S': 'Sat', 'U': 'Sun'
    }
    
    def format_schedule_time(weekdays_raw, times_raw):
        """Format weekdays and times into a readable schedule"""
        if pd.isna(times_raw) or times_raw == 'TBD':
            return 'TBD'
        
        import re
        times_str = str(times_raw)
        weekdays_str = str(weekdays_raw) if pd.notna(weekdays_raw) else ''
        
        # Handle semicolon-separated multiple times (new format from updated scraper)
        if ';' in times_str:
            time_parts = [part.strip() for part in times_str.split(';')]
            formatted_times = []
            
            for time_part in time_parts:
                formatted_time = format_single_time(time_part)
                if formatted_time != 'TBD':
                    formatted_times.append(formatted_time)
            
            return '; '.join(formatted_times) if formatted_times else 'TBD'
        # Handle multiple weekdays with same time (e.g., "Tuesday, Thursday" with single time)
        elif ',' in weekdays_str and ',' not in times_str:
            weekdays_list = [day.strip() for day in weekdays_str.split(',')]
            
            # Create pairs and sort by weekday order
            day_time_pairs = []
            weekday_order = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            
            for weekday in weekdays_list:
                # Format weekday abbreviation
                if weekday.lower() == 'monday':
                    day_abbrev = 'Mon'
                    day_order = 0
                elif weekday.lower() == 'tuesday':
                    day_abbrev = 'Tue'
                    day_order = 1
                elif weekday.lower() == 'wednesday':
                    day_abbrev = 'Wed'
                    day_order = 2
                elif weekday.lower() == 'thursday':
                    day_abbrev = 'Thu'
                    day_order = 3
                elif weekday.lower() == 'friday':
                    day_abbrev = 'Fri'
                    day_order = 4
                elif weekday.lower() == 'saturday':
                    day_abbrev = 'Sat'
                    day_order = 5
                elif weekday.lower() == 'sunday':
                    day_abbrev = 'Sun'
                    day_order = 6
                else:
                    day_abbrev = weekday
                    day_order = 7  # Unknown days go last
                
                # Clean up time format - use the same time for all weekdays
                import re
                time_clean = re.sub(r'(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)', r'\1 - \2', times_str, flags=re.IGNORECASE)
                day_time_pairs.append((day_order, f"{day_abbrev} {time_clean}"))
            
            # Sort by day order and extract formatted strings
            day_time_pairs.sort(key=lambda x: x[0])
            formatted_pairs = [pair[1] for pair in day_time_pairs]
            
            return '; '.join(formatted_pairs) if formatted_pairs else 'TBD'
        # Handle comma-separated weekdays and times within a single section (e.g., BUSA 695)
        elif ',' in weekdays_str and ',' in times_str:
            weekdays_list = [day.strip() for day in weekdays_str.split(',')]
            times_list = [time.strip() for time in times_str.split(',')]
            
            # Create pairs and sort by weekday order
            day_time_pairs = []
            weekday_order = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            
            for i, weekday in enumerate(weekdays_list):
                if i < len(times_list):
                    time = times_list[i]
                    # Format weekday abbreviation
                    if weekday.lower() == 'monday':
                        day_abbrev = 'Mon'
                        day_order = 0
                    elif weekday.lower() == 'tuesday':
                        day_abbrev = 'Tue'
                        day_order = 1
                    elif weekday.lower() == 'wednesday':
                        day_abbrev = 'Wed'
                        day_order = 2
                    elif weekday.lower() == 'thursday':
                        day_abbrev = 'Thu'
                        day_order = 3
                    elif weekday.lower() == 'friday':
                        day_abbrev = 'Fri'
                        day_order = 4
                    elif weekday.lower() == 'saturday':
                        day_abbrev = 'Sat'
                        day_order = 5
                    elif weekday.lower() == 'sunday':
                        day_abbrev = 'Sun'
                        day_order = 6
                    else:
                        day_abbrev = weekday
                        day_order = 7  # Unknown days go last
                    
                    # Clean up time format
                    time_clean = re.sub(r'(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)', r'\1 - \2', time, flags=re.IGNORECASE)
                    day_time_pairs.append((day_order, f"{day_abbrev} {time_clean}"))
            
            # Sort by day order and extract formatted strings
            day_time_pairs.sort(key=lambda x: x[0])
            formatted_pairs = [pair[1] for pair in day_time_pairs]
            
            return '; '.join(formatted_pairs) if formatted_pairs else 'TBD'
        else:
            # Handle single time - combine weekday and time properly
            if weekdays_str and weekdays_str != 'nan':
                # Convert full weekday names to abbreviations
                weekday_str = weekdays_str.strip()
                if weekday_str.lower() == 'monday':
                    day_abbrev = 'Mon'
                elif weekday_str.lower() == 'tuesday':
                    day_abbrev = 'Tue'
                elif weekday_str.lower() == 'wednesday':
                    day_abbrev = 'Wed'
                elif weekday_str.lower() == 'thursday':
                    day_abbrev = 'Thu'
                elif weekday_str.lower() == 'friday':
                    day_abbrev = 'Fri'
                elif weekday_str.lower() == 'saturday':
                    day_abbrev = 'Sat'
                elif weekday_str.lower() == 'sunday':
                    day_abbrev = 'Sun'
                else:
                    # Handle abbreviated weekdays
                    day_abbrev = weekday_mapping.get(weekday_str, weekday_str)
                
                # Clean up time format
                import re
                time_clean = re.sub(r'(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)', r'\1 - \2', times_str, flags=re.IGNORECASE)
                
                return f"{day_abbrev} {time_clean}"
            else:
                # No weekday info, just format the time
                return format_single_time(times_str)
    
    def format_single_time(times_str):
        """Format a single time entry"""
        import re
        
        # Extract weekday from the beginning of the string
        weekday_match = re.match(r'^([MTWRFSU]|Th)', times_str)
        weekday = weekday_match.group(1) if weekday_match else None
        
        # Extract time pattern (look for time like "1:00 PM-3:00 PM")
        time_pattern = r'(\d{1,2}:\d{2}\s*[AP]M\s*-\s*\d{1,2}:\d{2}\s*[AP]M)'
        time_match = re.search(time_pattern, times_str, re.IGNORECASE)
        time_str = time_match.group(1) if time_match else None
        
        if weekday and time_str:
            # Map weekday to full name
            if weekday in weekday_mapping:
                full_weekday = weekday_mapping[weekday]
                # Clean up time format to ensure proper spacing
                time_str = re.sub(r'(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)', r'\1 - \2', time_str, flags=re.IGNORECASE)
                return f"{full_weekday} {time_str}"
        
        # Fallback: if we found a time but no weekday, just return the time
        if time_str:
            time_str = re.sub(r'(\d{1,2}:\d{2}\s*[AP]M)\s*-\s*(\d{1,2}:\d{2}\s*[AP]M)', r'\1 - \2', time_str, flags=re.IGNORECASE)
            return time_str
        
        # If we found a weekday but no time
        if weekday and weekday in weekday_mapping:
            return weekday_mapping[weekday]
            
        return 'TBD'
    
    def clean_location(location_raw):
        """Clean up the messy location data"""
        if pd.isna(location_raw) or location_raw == 'TBD':
            return 'TBD'
        
        import re
        location_str = str(location_raw)
        
        # Handle semicolon-separated multiple locations (new format from updated scraper)
        if ';' in location_str:
            location_parts = [part.strip() for part in location_str.split(';')]
            cleaned_locations = []
            
            for location_part in location_parts:
                cleaned_location = clean_single_location(location_part)
                if cleaned_location != 'TBD':
                    cleaned_locations.append(cleaned_location)
            
            return '; '.join(cleaned_locations) if cleaned_locations else 'TBD'
        # Handle comma-separated locations (e.g., "Frasch Hall 422, Internet Class WWW..., Hall 422")
        elif ',' in location_str:
            location_parts = [part.strip() for part in location_str.split(',')]
            cleaned_locations = []
            
            for location_part in location_parts:
                cleaned_location = clean_single_location(location_part)
                if cleaned_location != 'TBD':
                    # Check for redundant room numbers (e.g., "Hall 422" when we already have "Frasch Hall 422")
                    is_redundant = False
                    for existing in cleaned_locations:
                        if (cleaned_location in existing or 
                            (cleaned_location.startswith('Hall ') and cleaned_location.split()[-1] in existing)):
                            is_redundant = True
                            break
                    
                    if not is_redundant and cleaned_location not in cleaned_locations:
                        cleaned_locations.append(cleaned_location)
            
            return '; '.join(cleaned_locations) if cleaned_locations else 'TBD'
        else:
            # Handle single location (legacy format or single section)
            return clean_single_location(location_str)
    
    def clean_single_location(location_str):
        """Clean up a single location entry"""
        import re
        
        # Priority 1: Check if this is already a clean room/building reference
        # Look for patterns like "Frasch Hall 422", "Building Room" first
        clean_room_match = re.search(r'^([A-Za-z]+\s+Hall\s+\d+)$', location_str.strip())
        if clean_room_match:
            return clean_room_match.group(1)
        
        # Priority 2: Extract room/building from longer strings
        building_patterns = [
            r'(Frasch\s+Hall\s+\d+)',
            r'([A-Za-z]+\s+Hall\s+\d+)',
            r'([A-Za-z]+\s+Building\s+\d+)',
            r'(Room\s+\d+)',
            r'(Classroom\s+\d+)'
        ]
        
        for pattern in building_patterns:
            match = re.search(pattern, location_str, re.IGNORECASE)
            if match:
                return match.group(1)
        
        # Priority 3: Handle Internet/Online classes
        if 'Internet Class' in location_str:
            # Check if it's a blended class with specific meeting info
            if 'Blended' in location_str or 'LEC' in location_str:
                # Try to extract specific meeting location/info
                lec_match = re.search(r'LEC\s+([A-Z])\s+(\d{1,2}:\d{2}\s*[AP]M\s*-\s*\d{1,2}:\d{2}\s*[AP]M)', location_str, re.IGNORECASE)
                if lec_match:
                    day_letter = lec_match.group(1)
                    time_info = lec_match.group(2)
                    day_name = {'M': 'Mon', 'T': 'Tue', 'W': 'Wed', 'R': 'Thu', 'F': 'Fri'}.get(day_letter, day_letter)
                    return f"Blended (Online + {day_name} in-person)"
                else:
                    return "Blended (Online + In-person)"
            else:
                return "Online"
        
        # Priority 4: Clean up other location strings
        # Remove teaching mode information at the end
        location_str = re.sub(r'(Hybrid|Online|Face-to-Face|Face to Face|Blended).*$', '', location_str, flags=re.IGNORECASE)
        
        # Remove TBD and date ranges
        location_str = re.sub(r'TBD', '', location_str)
        location_str = re.sub(r'\d{1,2}/\d{1,2}/\d{4}\s*-\s*\d{1,2}/\d{1,2}/\d{4}', '', location_str)
        
        # Remove "Downtown" since it's always there
        location_str = re.sub(r'Downtown,?\s*', '', location_str, flags=re.IGNORECASE)
        
        # Look for just building names without room numbers
        building_match = re.search(r'([A-Za-z]+\s+Hall)', location_str, re.IGNORECASE)
        if building_match:
            return building_match.group(1)
        
        # Fix spacing for hall/room numbers (e.g., "Hall417" -> "Hall 417")
        location_str = re.sub(r'([a-zA-Z])(\d)', r'\1 \2', location_str)
        
        # Clean up commas and spaces
        location_str = re.sub(r',+', ', ', location_str)
        location_str = re.sub(r'\s+', ' ', location_str)
        location_str = location_str.strip().strip(',')
        
        # If the result is empty or too short, return TBD
        if not location_str or len(location_str.strip()) < 3:
            return 'TBD'
        
        return location_str
    
    def extract_teaching_mode(location_raw):
        """Extract teaching mode from the location data"""
        if pd.isna(location_raw) or location_raw == 'TBD':
            return 'TBD'
        
        import re
        location_str = str(location_raw)
        
        # Handle semicolon-separated multiple modes (new format from updated scraper)
        if ';' in location_str:
            location_parts = [part.strip() for part in location_str.split(';')]
            extracted_modes = []
            
            for location_part in location_parts:
                mode = extract_single_mode(location_part)
                if mode != 'TBD':
                    extracted_modes.append(mode)
            
            # Remove duplicates while preserving order
            unique_modes = []
            for mode in extracted_modes:
                if mode not in unique_modes:
                    unique_modes.append(mode)
            
            return '; '.join(unique_modes) if unique_modes else 'TBD'
        else:
            # Handle single mode (legacy format or single section)
            return extract_single_mode(location_str)
    
    def extract_single_mode(location_str):
        """Extract teaching mode from a single location entry"""
        import re
        
        # Handle Internet/Online classes with specific patterns
        if 'Internet Class' in location_str:
            if 'Blended' in location_str:
                return 'Blended'
            else:
                return 'Online'
        
        # Look for teaching mode patterns
        mode_patterns = [
            r'(Hybrid - Face to Face)',
            r'(Face-to-Face)',
            r'(Face to Face)', 
            r'(Blended[^,]*)',
            r'(Hybrid[^,]*)',
            r'(Online)'
        ]
        
        for pattern in mode_patterns:
            match = re.search(pattern, location_str, re.IGNORECASE)
            if match:
                return match.group(1)
        
        return 'Face-to-Face'  # Default for FF sections
    
    # Create HTML table with improved formatting
    html_rows = []
    
    # Group sections by course code
    grouped_courses = df.groupby('Course_Code_Clean')
    
    for course_code, course_sections in grouped_courses:
        # Get basic course info from first section
        first_section = course_sections.iloc[0]
        
        # Combine information from all sections
        all_sections = list(course_sections['Session_Code_Clean'])
        all_times = []
        all_locations = []
        all_modes = []
        all_dates = []
        
        # Collect all times, locations, modes, and dates
        for _, section in course_sections.iterrows():
            # Format schedule time
            formatted_time = format_schedule_time(section['Weekdays_Clean'], section['Class_Times_Clean'])
            all_times.append(formatted_time)
            
            # Clean location
            location = clean_location(section['Locations_Clean'])
            all_locations.append(location)
            
            # Extract teaching mode
            mode = extract_teaching_mode(section['Locations_Clean'])
            all_modes.append(mode)
            
            # Format dates
            import re
            start_date = section['Start_Date'] if pd.notna(section['Start_Date']) else 'TBD'
            end_date = section['End_Date'] if pd.notna(section['End_Date']) else 'TBD'
            
            if start_date != 'TBD':
                date_match = re.search(r'(\d{1,2}/\d{1,2}/\d{4})', str(start_date))
                start_date = date_match.group(1) if date_match else 'TBD'
            
            if end_date != 'TBD':
                date_match = re.search(r'(\d{1,2}/\d{1,2}/\d{4})', str(end_date))
                end_date = date_match.group(1) if date_match else 'TBD'
            
            date_range = f"{start_date} - {end_date}" if start_date != 'TBD' and end_date != 'TBD' else 'TBD'
            all_dates.append(date_range)
        
        # Remove duplicates while preserving order
        def remove_duplicates(lst):
            seen = set()
            result = []
            for item in lst:
                if item not in seen:
                    seen.add(item)
                    result.append(item)
            return result
        
        all_times = remove_duplicates(all_times)
        all_locations = remove_duplicates(all_locations)
        all_modes = remove_duplicates(all_modes)
        all_dates = remove_duplicates(all_dates)
        
        # Join with semicolons
        combined_sections = '; '.join(all_sections)
        combined_times = '; '.join(all_times)
        combined_locations = '; '.join(all_locations)
        combined_modes = '; '.join(all_modes)
        combined_dates = '; '.join(all_dates)
        
        # Calculate total enrollment and capacity
        total_enrolled = course_sections['Enrolled_Seats'].sum()
        total_capacity = course_sections['Total_Seats'].sum()
        
        # Determine status based on total availability
        total_available = total_capacity - total_enrolled
        if total_available > 5:
            status_class = "enrollment available"
        elif total_available > 0:
            status_class = "enrollment limited"
        else:
            status_class = "enrollment full"
        
        # First term indicator
        first_term_class = "first-term" if first_section['First_Term'] == 'Yes' else ""
        first_term_indicator = '<span class="first-term-badge">First Term</span>' if first_section['First_Term'] == 'Yes' else ''
        
        # Get instructor info (use first non-TBD instructor)
        instructor = 'TBD'
        for _, section in course_sections.iterrows():
            section_instructor = section['Instructors_Clean'] if pd.notna(section['Instructors_Clean']) else 'TBD'
            if section_instructor != 'TBD':
                instructor = section_instructor
                break
        
        html_row = f"""
        <tr class="{first_term_class}">
            <td><strong>{first_section['Course_Display']}</strong> {first_term_indicator}</td>
            <td>{combined_sections}</td>
            <td>{first_section['Course_Name_Clean']}</td>
            <td>{first_section['Credits']}</td>
            <td class="{status_class}">{total_enrolled}</td>
            <td class="{status_class}">{total_capacity}</td>
            <td>{combined_times}</td>
            <td>{combined_locations}</td>
            <td>{instructor}</td>
            <td>{combined_dates}</td>
        </tr>"""
        html_rows.append(html_row)
    
    # Create table header (removed Days column, kept Times and Dates separate)
    table_html = f"""
    <script>
    function exportTableToCSV(filename) {{
        var csv = [];
        // Find the table more reliably - it's inside a div but may not have the exact class we expect
        var table = document.querySelector('table');
        if (!table) {{
            alert('Table not found for export');
            return;
        }}
        
        var rows = table.querySelectorAll('tr');
        
        for (var i = 0; i < rows.length; i++) {{
            var row = [], cols = rows[i].querySelectorAll('td, th');
            
            // Process all existing columns normally
            for (var j = 0; j < cols.length; j++) {{
                var cellText = cols[j].innerText || cols[j].textContent || '';
                // Remove extra whitespace and newlines
                cellText = cellText.trim().replace(/\\s+/g, ' ');
                
                // Escape quotes and wrap in quotes if contains commas, quotes, or newlines
                if (cellText.includes(',') || cellText.includes('"') || cellText.includes('\\n')) {{
                    cellText = '"' + cellText.replace(/"/g, '""') + '"';
                }}
                row.push(cellText);
            }}
            
            csv.push(row.join(','));
        }}
        
        // Create CSV file and trigger download
        var csvFile = new Blob([csv.join('\\n')], {{ type: 'text/csv' }});
        var downloadLink = document.createElement('a');
        downloadLink.download = filename + '.csv';
        downloadLink.href = window.URL.createObjectURL(csvFile);
        downloadLink.style.display = 'none';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        
        // Show success message
        var btn = document.getElementById('exportTableBtn');
        var originalText = btn.innerHTML;
        btn.innerHTML = '✅ Downloaded!';
        btn.disabled = true;
        setTimeout(function() {{
            btn.innerHTML = originalText;
            btn.disabled = false;
        }}, 2000);
    }}
    </script>
    
    <div class="course-table">
        <table>
            <thead>
                <tr>
                    <th>Course</th>
                    <th>Section</th>
                    <th>Course Name</th>
                    <th>Credits</th>
                    <th>Enrolled</th>
                    <th>Capacity</th>
                    <th>Times</th>
                    <th>Location</th>
                    <th>Instructor</th>
                    <th>Dates</th>
                </tr>
            </thead>
            <tbody>
                {''.join(html_rows)}
            </tbody>
        </table>
    </div>
    """
    
    display(HTML(table_html))
    
    # Export section below the table
    export_html = f"""
    <div class="export-section" style="margin-top: 1.5rem;">
        <h4 style="margin: 0 0 0.5rem 0; color: #1e40af; font-size: 1.1rem;">📥 Export Data</h4>
        <button id="exportTableBtn" onclick="exportTableToCSV('course-schedule')" class="export-btn">
            📊 Export Table as CSV
        </button>
        <p style="margin: 0.5rem 0 0 0; font-size: 0.85rem; color: #6b7280;">
            Downloads the formatted course schedule as shown above, including first term indicators
        </p>
    </div>
    """
    display(HTML(export_html))
    
else:
    print("⚠️ No course data available to display.")
```

---

*Data automatically generated from Franklin Course Catalog*