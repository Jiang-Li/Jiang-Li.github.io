name: Update Course Data

on:
  schedule:
    # Run every day at 6:00 AM UTC (adjust timezone as needed)
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-courses:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        
    - name: Install Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Install ChromeDriver
      run: |
        # Get Chrome version
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3)
        echo "Chrome version: $CHROME_VERSION"
        
        # Download compatible ChromeDriver from Chrome for Testing
        wget -O chromedriver-linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        rm -rf chromedriver-linux64.zip chromedriver-linux64
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbformat ipykernel
        pip install -r teach/franklin-course-scraper/requirements.txt
        
    - name: Run course scraper
      run: |
        cd teach/franklin-course-scraper/scripts
        python scrape_franklin_courses.py
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add teach/franklin-course-scraper/data/franklin_courses.csv
        git commit -m "ðŸ¤– Auto-update course data $(date +'%Y-%m-%d %H:%M:%S')"
        git push
        
    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        tinytex: true
        
    - name: Configure Python environment for Quarto
      run: |
        # Install Jupyter in setup-python environment
        python -m pip install --upgrade pip
        python -m pip install jupyter nbformat ipykernel
        
        # Verify installation
        python -c "import nbformat; print('nbformat installed successfully')"
        
        # Configure environment variables to force Quarto to use our Python
        echo "QUARTO_PYTHON=$(which python)" >> $GITHUB_ENV
        echo "JUPYTER_PATH=$(python -c 'import jupyter; print(jupyter.path.jupyter_path()[0])')" >> $GITHUB_ENV
        
        # Create a simple requirements.txt for the Jupyter environment
        echo "jupyter" > /tmp/requirements.txt
        echo "nbformat" >> /tmp/requirements.txt
        echo "ipykernel" >> /tmp/requirements.txt
        
    - name: Render website
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        quarto render
        
    - name: Deploy to GitHub Pages
      if: steps.verify-changed-files.outputs.changed == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site 